scriptencoding utf-8
syntax on

" enable file type detection - required for Dirvish to work
filetype plugin indent on

" the above call to turn on plugin indenting based on filetype also
" turns on filetype indenting outside of plugins - so we will now turn
" off basic filetype indenting as this keeps messing with my code 
filetype indent off

" not exactly sure what this does, but it works to get the mouse
" able to move statusbar to adjust window sizes
if has("mouse_sgr")
  set ttymouse=sgr
else
  set ttymouse=xterm2
endif

" enable 256 color
set t_Co=256
set background=dark

set termguicolors

" customize the mer-easy-custom colorscheme
source ~/.vim/mer-easy-custom-overrides.vim
"call MERCustomOverride('ansi16')
call MERCustomOverride('hacker')
colorscheme mer-easy-custom

" set a few highlight colors that I always want no matter which
" colorscheme is set
" set color of non text chars (eol, extends and precedes)
"hi NonText ctermfg=235 ctermbg=NONE cterm=NONE
" " set color of special keys (nbsp, tab and trail)
"hi SpecialKey ctermfg=235 ctermbg=NONE cterm=NONE
" " set colored columns (to indicate desired line length) to dark gray
"hi colorcolumn ctermfg=NONE ctermbg=235 cterm=NONE

set colorcolumn=80,120										" add colored line at specifed columns
set encoding=utf-8 fileencoding=utf-8 termencoding=utf-8	" saving and encoding
set nobackup nowritebackup noswapfile autoread				" no backup or swap
set hlsearch incsearch ignorecase smartcase					" search
set wildmenu wildmode=longest:full,full						" completion
set backspace=indent,eol,start								" sane backspace
set clipboard=unnamedplus									" use system clipboard for yank/pul/delete
set nomousehide												" don't hide the mouse cursor while typing
set mouse=n													" enable mouse support in normal mode
set mousemodel=popup										" right-click pops up context menu
set ruler													" show cursor position in status bar
set number													" show line numbers on left
set nofoldenable											" don't allow code folding
set scrolloff=3												" scroll the window so we can always see x lines around the cursor
set fillchars=vert:│
"set cursorline												" highlight the current line // NOTE: THIS SEEMS TO GREATLY SLOW DOWN SCROLLING IF ENABLED
"set nowrap													" don't wrap lines
set wrap													" wrap lines
set textwidth=0 wrapmargin=0								" turn off physical line wrapping (ie: automatic insertion of newlines)
set tabstop=4 shiftwidth=4 softtabstop=4 noexpandtab		" 4 space tabstops
set listchars=nbsp:·,tab:│·,trail:▲
set list													" turns on showing chars described in listchars
set showmatch												" highlights matching parens/brackets
set laststatus=2											" always enbale status line
set showtabline=2											" alwasys display tabline
set relativenumber											" in place of absolute line numbers, show relative from current // NOTE: THIS GREALY SLOWS DOWN SCROLLING WHEN ENABLED
set lazyredraw												" redraw screen less frequently - ths speeds up verticle scrolling so can now use relativenumber with acceptable scroll speed
set undofile												" create undo files so undos carry over even after closed
set undolevels=5000											" store up to 5000 levels of undo history
set undodir=$HOME/.vim/undo									" where to save undo files
set autoindent												" copy indent from prior line
set visualbell												" display visual bell instead of beeping
set ttyfast													" fast terminal connection
"set autochdir												" automatically charnge current working dir to file of current buffer
set viminfo='1000,f1,<500,%,n~/.vim/viminfo
set sessionoptions-=options									" remove 'options' from the data saved when saving sessions - this was causing color schemes to load base theme without taking into account global vars

"show block cursor in normal mode and a line cursor in insert mode
let &t_ti .= "\e[1 q"
let &t_SI .= "\e[5 q"
let &t_EI .= "\e[1 q"
let &t_te .= "\e[0 q"

"turn on the sign column always so it doesn't cause the whole window to move
"when there are signs or no signs to display
if exists('&signcolumn')
  set signcolumn=yes
else
  let g:gitgutter_sign_column_always = 1
endif

" configiure netrw to be like NERDtree
let g:netrw_banner = 0										" hide netrd banner (I to toggle)
let g:netrw_liststyle = 3									" show netrw tree with parent showing
"let g:netrw_browse_split = 0								" open file in same window on <cr>
let g:netrw_browse_split = 4								" open file in prior window on <cr>
let g:netrw_altv = 1 
let g:netrw_winsize = 25									" set netrw width to 25% of page

" php syntax options
let php_sql_query = 1										" highlight SQL syntax in strings
let php_htmlInStrings = 1									" highlight HTML in strings

" CtrlP options
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_by_filename = 1
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }	" use ctrlp-py-matcher plugin for file matching
let g:ctrlp_custom_ignore = 'undo\'
let g:airline_powerline_fonts = 1

"syntastic config
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" histwin config
hi! link UBKey Comment
hi! link UBActive String

" automatically open quickfix window after :make, :grep, etc
augroup autoquickfix
  autocmd!
  autocmd QuickFixCmdPost [^1]* cwindow
  autocmd QuickFixCmdPost 1* lwindow
augroup END

" automatically toggle relative line numbers depending on if window has focus
augroup relativenumbertoggle
  autocmd!
  autocmd WinEnter,FocusGained,InsertLeave * set relativenumber
  autocmd WinLeave,FocusLost,InsertEnter * set norelativenumber
augroup END

" enable PHP autocomplete for all PHP files
autocmd FileType php set omnifunc=phpcomplete#CompletePHP

" trim whitespace from end of lines whenever saving PHP file
"autocmd FileType php autocmd BufWritePre <buffer> %s/\s\+$//e

function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
	set nolazyredraw
  else
    set relativenumber
	set lazyredraw
  endif
endfunc

function! GetColorSchemeGroup()
  let s = synID(line('.'), col('.'), 1)
  echo synIDattr(s, 'name') . ' -> ' . synIDattr(synIDtrans(s), 'name')
endfunc

set timeout timeoutlen=3000 ttimeoutlen=10	" time out on mapping after 3 seconds, on key codes after 1/100th sec

" key mappings
let s:debug_path = fnamemodify('~/.vim/templates/phpdebuglog.php', ':p')
execute "inoremap <leader>l include_once('" . s:debug_path . "');"
inoremap <c-F> <C-x><C-o>
inoremap <leader>p <ESC>:r ~/.vim/templates/phpdoc.php<CR>jA
inoremap <leader>d <ESC>:r ~/.vim/templates/phperron.php<CR>i
nnoremap <leader>d :bp\|bd #<CR>
nnoremap <leader>n :call NumberToggle()<CR>
nnoremap <leader>b :ls<CR>:b
nnoremap <leader>e :e **/*
nnoremap <leader>s :sp **/*
nnoremap <leader>cd :lcd %:p:h<CR>:pwd<CR>
nnoremap <F4> :Histwin<CR>
noremap <leader><F9> :mks! ~/.vim/session/session_1<CR>
noremap <leader><F10> :mks! ~/.vim/session/session_2<CR>
noremap <leader><F11> :mks! ~/.vim/session/session_3<CR>
noremap <leader><F12> :mks! ~/.vim/session/session_4<CR>
noremap <F9> :source ~/.vim/session/session_1<CR>
noremap <F10> :source ~/.vim/session/session_2<CR>
noremap <F11> :source ~/.vim/session/session_3<CR>
noremap <F12> :source ~/.vim/session/session_4<CR>
nnoremap <TAB> <C-W>w
nnoremap <s-TAB> <C-W>W
nnoremap <leader>l :call GetColorSchemeGroup()<CR>

" load my custom statusline and tabline
"let g:LCARS256 = 1
"source ~/.vim/lcars-lines.vim

" load my custom statusline and tabline
"let g:merSection1FG=6
"let g:merSection1BG=7
"let g:merSection2FG=7
"let g:merSection2BG=13
"let g:merMainFG=7
"let g:merMainBG=12
"let g:merVisualFG=6
"let g:merVisualBG=9
"let g:merInsertFG=6
"let g:merInsertBG=8
"let g:merInactiveFG=6
"let g:merInactiveBG=11

source ~/.vim/mer-lines-overrides.vim
call MERLinesOverride('hacker')
source ~/.vim/mer-lines.vim

